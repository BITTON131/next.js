{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ai que delicia\\\\next.js\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience > experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      challengesCompleted,\n      currentExperience,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/ai que delicia/next.js/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAyBA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AACtE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAE,CAAR,IAAW,CAApB,EAAuB,CAAvB,CAA9B;;AAEF,WAASW,OAAT,GAAmB;AACjBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASY,iBAAT,GAA6B;AACzB,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAYL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAvC,CAA7B;AACA,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAA0B;AACtBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASY,iBAAT,GAA8B;AAC5B,QAAI,CAACb,eAAL,EAAsB;AAClB;AACH;;AAGD,UAAM;AAAEc,MAAAA;AAAF,QAAad,eAAnB;AAEA,QAAIe,eAAe,GAAGnB,iBAAiB,GAAGkB,MAA1C;;AAEA,QAAIC,eAAe,GAAGb,qBAAtB,EAA6C;AACzCa,MAAAA,eAAe,GAAGA,eAAe,GAAGb,qBAApC;AACAG,MAAAA,OAAO;AACV;;AAGDR,IAAAA,oBAAoB,CAACkB,eAAD,CAApB;AACAd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;;AAEC,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EAAE;AACNJ,MAAAA,KADM;AAENI,MAAAA,mBAFM;AAGNF,MAAAA,iBAHM;AAINS,MAAAA,OAJM;AAKNC,MAAAA,iBALM;AAMNN,MAAAA,eANM;AAONY,MAAAA,cAPM;AAQNV,MAAAA,qBARM;AASNW,MAAAA;AATM,KADP;AAAA,cAaKpB;AAbL;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    challengesCompleted: number;\r\n     currentExperience: number;\r\n     experienceToNextLevel: number;\r\n     activeChallenge:Challenge;\r\n     resetChallenge:() => void;\r\n     levelUp: () => void;\r\n     startNewChallenge:() =>void;\r\n     completeChallenge:() =>void;\r\n     \r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n    const [level, setLevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null)\r\n\r\n    const experienceToNextLevel = Math.pow((level +1)*4, 2)\r\n\r\n  function levelUp() {\r\n    setLevel(level + 1);\r\n  }\r\n\r\n  function startNewChallenge() {\r\n      const randomChallengeIndex = Math.floor (Math.random() * challenges.length)\r\n      const challenge = challenges[randomChallengeIndex];\r\n      \r\n      setActiveChallenge(challenge)\r\n  }\r\n\r\n  function resetChallenge() {\r\n      setActiveChallenge(null);\r\n  }\r\n\r\n  function completeChallenge( ) {\r\n    if (!activeChallenge) {\r\n        return;\r\n    }\r\n\r\n\r\n    const { amount } = activeChallenge;\r\n\r\n    let finalExperience = currentExperience + amount;\r\n\r\n    if (finalExperience > experienceToNextLevel) {\r\n        finalExperience = finalExperience - experienceToNextLevel;\r\n        levelUp();\r\n    }\r\n\r\n\r\n    setCurrentExperience(finalExperience);\r\n    setActiveChallenge(null);\r\n    setChallengesCompleted(challengesCompleted + 1);\r\n  }\r\n\r\n    return (\r\n        <ChallengesContext.Provider \r\n        value={{ \r\n         level, \r\n         challengesCompleted, \r\n         currentExperience, \r\n         levelUp,\r\n         startNewChallenge,\r\n         activeChallenge,\r\n         resetChallenge,\r\n         experienceToNextLevel,\r\n         completeChallenge,\r\n         }}\r\n         >\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}