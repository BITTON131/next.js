{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ai que delicia\\\\next.js\\\\src\\\\contexts\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport var CountdownContext = /*#__PURE__*/createContext({});\nvar countdownTimeout;\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      Isactive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  function StartCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTime(0.1 * 60);\n  }\n\n  useEffect(function () {\n    if (Isactive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (Isactive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [Isactive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      Isactive: Isactive,\n      StartCountdown: StartCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CountdownProvider, \"b71Qs/Phkn7fLElinwgpX7iyrNE=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/Users/ai que delicia/next.js/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","Isactive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","StartCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA,SAAmBA,aAAnB,EAA6CC,UAA7C,EAAyDC,SAAzD,EAAoEC,QAApE,QAAoF,OAApF;AAEA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,oBAEtCP,UAAU,CAACG,iBAAD,CAF4B;AAAA,MAE5DK,iBAF4D,eAE5DA,iBAF4D;;AAAA,kBAK5CN,QAAQ,CAAC,MAAM,EAAP,CALoC;AAAA,MAK7DO,IAL6D;AAAA,MAKvDC,OALuD;;AAAA,mBAMpCR,QAAQ,CAAC,KAAD,CAN4B;AAAA,MAM7DS,QAN6D;AAAA,MAMnDC,WANmD;;AAAA,mBAO9BV,QAAQ,CAAC,KAAD,CAPsB;AAAA,MAO7DW,WAP6D;AAAA,MAOhDC,cAPgD;;AASpE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAE,EAAjB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACtBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAGD,WAASQ,cAAT,GAA0B;AACtBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AAEH;;AAGDT,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGU,QAAQ,IAAIF,IAAI,GAAG,CAAtB,EAAyB;AACrBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,YAAM;AAChCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,IAAI,CAAxB,EAA2B;AAC9BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AACJ,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAcA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BM,MAAAA,OAAO,EAAPA,OAD8B;AAE9BG,MAAAA,OAAO,EAAPA,OAF8B;AAG9BL,MAAAA,WAAW,EAAXA,WAH8B;AAI9BF,MAAAA,QAAQ,EAARA,QAJ8B;AAK9BQ,MAAAA,cAAc,EAAdA,cAL8B;AAM9BC,MAAAA,cAAc,EAAdA;AAN8B,KAAlC;AAAA,cAQKb;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GApDeD,iB;;KAAAA,iB","sourcesContent":["import { Children, createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { Countdown } from \"../compoments/Countdown\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\n interface CountdownContextData {\r\n    minutes: number;\r\n    seconds: number;\r\n    hasFinished: boolean;\r\n    Isactive: boolean;\r\n    StartCountdown: () => void;\r\n    resetCountdown: () => void;\r\n }\r\n \r\n interface CountdownProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData)\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function CountdownProvider({ children }: CountdownProviderProps) {\r\n    \r\n    const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n\r\n    const [time, setTime] = useState(0.1 * 60);\r\n    const [Isactive, setIsActive] = useState(false);\r\n    const [hasFinished, setHasFinished] = useState(false);\r\n\r\n    const minutes = Math.floor(time/ 60);\r\n    const seconds = time % 60;\r\n\r\n    function StartCountdown() {\r\n        setIsActive(true);\r\n    }\r\n\r\n\r\n    function resetCountdown() {\r\n        clearTimeout(countdownTimeout);\r\n        setIsActive(false);\r\n        setHasFinished(false);\r\n        setTime(0.1 * 60);\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if(Isactive && time > 0) {\r\n            countdownTimeout = setTimeout(() => {\r\n                setTime(time - 1);\r\n            }, 1000)\r\n        } else if (Isactive && time == 0) {\r\n            setHasFinished(true);\r\n            setIsActive(false);\r\n            startNewChallenge();\r\n        }\r\n    }, [Isactive, time])\r\n\r\n\r\n    \r\n    return (\r\n        <CountdownContext.Provider value={{\r\n            minutes,\r\n            seconds,\r\n            hasFinished,\r\n            Isactive,\r\n            StartCountdown,\r\n            resetCountdown,\r\n        }}>\r\n            {children}\r\n        </CountdownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}